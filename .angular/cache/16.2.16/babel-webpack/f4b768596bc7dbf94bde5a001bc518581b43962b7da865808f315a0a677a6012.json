{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { UP_ARROW, DOWN_ARROW, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Output, ViewChild, Input, Directive, ContentChildren, NgModule } from '@angular/core';\nimport * as i6 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { distinctUntilChanged, takeUntil, startWith, switchMap, mergeMap, map } from 'rxjs/operators';\nimport * as i3 from 'ng-zorro-antd/core/services';\nimport { NzDestroyService } from 'ng-zorro-antd/core/services';\nimport { isNotNil, getStatusClassNames, InputBoolean } from 'ng-zorro-antd/core/util';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i4 from 'ng-zorro-antd/core/form';\nimport { NzFormNoStatusService, NzFormPatchModule } from 'ng-zorro-antd/core/form';\nimport * as i4$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i7 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i2$1 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nconst _c0 = [\"upHandler\"];\nconst _c1 = [\"downHandler\"];\nconst _c2 = [\"inputElement\"];\nfunction NzInputNumberComponent_nz_form_item_feedback_icon_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-form-item-feedback-icon\", 11);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"status\", ctx_r3.status);\n  }\n}\nconst _c3 = [\"nz-input-number-group-slot\", \"\"];\nfunction NzInputNumberGroupSlotComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 2);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nzType\", ctx_r0.icon);\n  }\n}\nfunction NzInputNumberGroupSlotComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.template);\n  }\n}\nconst _c4 = [\"*\"];\nfunction NzInputNumberGroupComponent_span_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"icon\", ctx_r7.nzAddOnBeforeIcon)(\"template\", ctx_r7.nzAddOnBefore);\n  }\n}\nfunction NzInputNumberGroupComponent_span_0_div_2_ng_template_1_Template(rf, ctx) {}\nfunction NzInputNumberGroupComponent_span_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, NzInputNumberGroupComponent_span_0_div_2_ng_template_1_Template, 0, 0, \"ng-template\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵclassProp(\"ant-input-number-affix-wrapper-disabled\", ctx_r8.disabled)(\"ant-input-number-affix-wrapper-sm\", ctx_r8.isSmall)(\"ant-input-number-affix-wrapper-lg\", ctx_r8.isLarge)(\"ant-input-number-affix-wrapper-focused\", ctx_r8.focused);\n    i0.ɵɵproperty(\"ngClass\", ctx_r8.affixInGroupStatusCls);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\nfunction NzInputNumberGroupComponent_span_0_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"icon\", ctx_r9.nzAddOnAfterIcon)(\"template\", ctx_r9.nzAddOnAfter);\n  }\n}\nfunction NzInputNumberGroupComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtemplate(1, NzInputNumberGroupComponent_span_0_div_1_Template, 1, 2, \"div\", 5);\n    i0.ɵɵtemplate(2, NzInputNumberGroupComponent_span_0_div_2_Template, 2, 10, \"div\", 6);\n    i0.ɵɵtemplate(3, NzInputNumberGroupComponent_span_0_span_3_Template, 1, 2, \"span\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r5 = i0.ɵɵreference(6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.nzAddOnBefore || ctx_r0.nzAddOnBeforeIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isAffix || ctx_r0.hasFeedback)(\"ngIfElse\", _r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.nzAddOnAfter || ctx_r0.nzAddOnAfterIcon);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_1_ng_template_0_ng_template_0_Template(rf, ctx) {}\nfunction NzInputNumberGroupComponent_ng_template_1_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzInputNumberGroupComponent_ng_template_1_ng_template_0_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzInputNumberGroupComponent_ng_template_1_ng_template_0_Template, 1, 1, \"ng-template\", 10);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    const _r5 = i0.ɵɵreference(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isAffix)(\"ngIfElse\", _r5);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_3_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 13);\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"icon\", ctx_r13.nzPrefixIcon)(\"template\", ctx_r13.nzPrefix);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_3_ng_template_1_Template(rf, ctx) {}\nfunction NzInputNumberGroupComponent_ng_template_3_span_2_nz_form_item_feedback_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-form-item-feedback-icon\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"status\", ctx_r16.status);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_3_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtemplate(1, NzInputNumberGroupComponent_ng_template_3_span_2_nz_form_item_feedback_icon_1_Template, 1, 1, \"nz-form-item-feedback-icon\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"icon\", ctx_r15.nzSuffixIcon)(\"template\", ctx_r15.nzSuffix);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r15.isFeedback);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzInputNumberGroupComponent_ng_template_3_span_0_Template, 1, 2, \"span\", 11);\n    i0.ɵɵtemplate(1, NzInputNumberGroupComponent_ng_template_3_ng_template_1_Template, 0, 0, \"ng-template\", 9);\n    i0.ɵɵtemplate(2, NzInputNumberGroupComponent_ng_template_3_span_2_Template, 2, 3, \"span\", 12);\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    const _r5 = i0.ɵɵreference(6);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.nzPrefix || ctx_r4.nzPrefixIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.nzSuffix || ctx_r4.nzSuffixIcon || ctx_r4.isFeedback);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_5_span_1_nz_form_item_feedback_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"nz-form-item-feedback-icon\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"status\", ctx_r18.status);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 18);\n    i0.ɵɵtemplate(1, NzInputNumberGroupComponent_ng_template_5_span_1_nz_form_item_feedback_icon_1_Template, 1, 1, \"nz-form-item-feedback-icon\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r17.isFeedback);\n  }\n}\nfunction NzInputNumberGroupComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n    i0.ɵɵtemplate(1, NzInputNumberGroupComponent_ng_template_5_span_1_Template, 2, 1, \"span\", 17);\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r6.isAddOn && !ctx_r6.isAffix && ctx_r6.isFeedback);\n  }\n}\nlet NzInputNumberComponent = /*#__PURE__*/(() => {\n  class NzInputNumberComponent {\n    onModelChange(value) {\n      this.parsedValue = this.nzParser(value);\n      this.inputElement.nativeElement.value = `${this.parsedValue}`;\n      const validValue = this.getCurrentValidValue(this.parsedValue);\n      this.setValue(validValue);\n    }\n    getCurrentValidValue(value) {\n      let val = value;\n      if (val === '') {\n        val = '';\n      } else if (!this.isNotCompleteNumber(val)) {\n        val = `${this.getValidValue(val)}`;\n      } else {\n        val = this.value;\n      }\n      return this.toNumber(val);\n    }\n    // '1.' '1x' 'xx' '' => are not complete numbers\n    isNotCompleteNumber(num) {\n      return isNaN(num) || num === '' || num === null || !!(num && num.toString().indexOf('.') === num.toString().length - 1);\n    }\n    getValidValue(value) {\n      let val = parseFloat(value);\n      // https://github.com/ant-design/ant-design/issues/7358\n      if (isNaN(val)) {\n        return value;\n      }\n      if (val < this.nzMin) {\n        val = this.nzMin;\n      }\n      if (val > this.nzMax) {\n        val = this.nzMax;\n      }\n      return val;\n    }\n    toNumber(num) {\n      if (this.isNotCompleteNumber(num)) {\n        return num;\n      }\n      const numStr = String(num);\n      if (numStr.indexOf('.') >= 0 && isNotNil(this.nzPrecision)) {\n        if (typeof this.nzPrecisionMode === 'function') {\n          return this.nzPrecisionMode(num, this.nzPrecision);\n        } else if (this.nzPrecisionMode === 'cut') {\n          const numSplit = numStr.split('.');\n          numSplit[1] = numSplit[1].slice(0, this.nzPrecision);\n          return Number(numSplit.join('.'));\n        }\n        return Number(Number(num).toFixed(this.nzPrecision));\n      }\n      return Number(num);\n    }\n    getRatio(e) {\n      let ratio = 1;\n      if (e.metaKey || e.ctrlKey) {\n        ratio = 0.1;\n      } else if (e.shiftKey) {\n        ratio = 10;\n      }\n      return ratio;\n    }\n    down(e, ratio) {\n      if (!this.isFocused) {\n        this.focus();\n      }\n      this.step('down', e, ratio);\n    }\n    up(e, ratio) {\n      if (!this.isFocused) {\n        this.focus();\n      }\n      this.step('up', e, ratio);\n    }\n    getPrecision(value) {\n      const valueString = value.toString();\n      if (valueString.indexOf('e-') >= 0) {\n        return parseInt(valueString.slice(valueString.indexOf('e-') + 2), 10);\n      }\n      let precision = 0;\n      if (valueString.indexOf('.') >= 0) {\n        precision = valueString.length - valueString.indexOf('.') - 1;\n      }\n      return precision;\n    }\n    // step={1.0} value={1.51}\n    // press +\n    // then value should be 2.51, rather than 2.5\n    // if this.props.precision is undefined\n    // https://github.com/react-component/input-number/issues/39\n    getMaxPrecision(currentValue, ratio) {\n      if (isNotNil(this.nzPrecision)) {\n        return this.nzPrecision;\n      }\n      const ratioPrecision = this.getPrecision(ratio);\n      const stepPrecision = this.getPrecision(this.nzStep);\n      const currentValuePrecision = this.getPrecision(currentValue);\n      if (!currentValue) {\n        return ratioPrecision + stepPrecision;\n      }\n      return Math.max(currentValuePrecision, ratioPrecision + stepPrecision);\n    }\n    getPrecisionFactor(currentValue, ratio) {\n      const precision = this.getMaxPrecision(currentValue, ratio);\n      return Math.pow(10, precision);\n    }\n    upStep(val, rat) {\n      const precisionFactor = this.getPrecisionFactor(val, rat);\n      const precision = Math.abs(this.getMaxPrecision(val, rat));\n      let result;\n      if (typeof val === 'number') {\n        result = ((precisionFactor * val + precisionFactor * this.nzStep * rat) / precisionFactor).toFixed(precision);\n      } else {\n        result = this.nzMin === -Infinity ? this.nzStep : this.nzMin;\n      }\n      return this.toNumber(result);\n    }\n    downStep(val, rat) {\n      const precisionFactor = this.getPrecisionFactor(val, rat);\n      const precision = Math.abs(this.getMaxPrecision(val, rat));\n      let result;\n      if (typeof val === 'number') {\n        result = ((precisionFactor * val - precisionFactor * this.nzStep * rat) / precisionFactor).toFixed(precision);\n      } else {\n        result = this.nzMin === -Infinity ? -this.nzStep : this.nzMin;\n      }\n      return this.toNumber(result);\n    }\n    step(type, e, ratio = 1) {\n      this.stop();\n      e.preventDefault();\n      if (this.nzDisabled) {\n        return;\n      }\n      const value = this.getCurrentValidValue(this.parsedValue) || 0;\n      let val = 0;\n      if (type === 'up') {\n        val = this.upStep(value, ratio);\n      } else if (type === 'down') {\n        val = this.downStep(value, ratio);\n      }\n      const outOfRange = val > this.nzMax || val < this.nzMin;\n      if (val > this.nzMax) {\n        val = this.nzMax;\n      } else if (val < this.nzMin) {\n        val = this.nzMin;\n      }\n      this.setValue(val);\n      this.updateDisplayValue(val);\n      this.isFocused = true;\n      if (outOfRange) {\n        return;\n      }\n      this.autoStepTimer = setTimeout(() => {\n        this[type](e, ratio);\n      }, 300);\n    }\n    stop() {\n      if (this.autoStepTimer) {\n        clearTimeout(this.autoStepTimer);\n      }\n    }\n    setValue(value) {\n      if (`${this.value}` !== `${value}`) {\n        this.onChange(value);\n      }\n      this.value = value;\n      this.parsedValue = value;\n      this.disabledUp = this.disabledDown = false;\n      if (value || value === 0) {\n        const val = Number(value);\n        if (val >= this.nzMax) {\n          this.disabledUp = true;\n        }\n        if (val <= this.nzMin) {\n          this.disabledDown = true;\n        }\n      }\n    }\n    updateDisplayValue(value) {\n      const displayValue = isNotNil(this.nzFormatter(value)) ? this.nzFormatter(value) : '';\n      this.displayValue = displayValue;\n      this.inputElement.nativeElement.value = `${displayValue}`;\n    }\n    writeValue(value) {\n      this.value = value;\n      this.setValue(value);\n      this.updateDisplayValue(value);\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n      this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;\n      this.isNzDisableFirstChange = false;\n      this.disabled$.next(this.nzDisabled);\n      this.cdr.markForCheck();\n    }\n    focus() {\n      this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n    blur() {\n      this.inputElement.nativeElement.blur();\n    }\n    constructor(ngZone, elementRef, cdr, focusMonitor, renderer, directionality, destroy$, nzFormStatusService, nzFormNoStatusService) {\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n      this.cdr = cdr;\n      this.focusMonitor = focusMonitor;\n      this.renderer = renderer;\n      this.directionality = directionality;\n      this.destroy$ = destroy$;\n      this.nzFormStatusService = nzFormStatusService;\n      this.nzFormNoStatusService = nzFormNoStatusService;\n      this.isNzDisableFirstChange = true;\n      this.isFocused = false;\n      this.disabled$ = new Subject();\n      this.disabledUp = false;\n      this.disabledDown = false;\n      this.dir = 'ltr';\n      // status\n      this.prefixCls = 'ant-input-number';\n      this.status = '';\n      this.statusCls = {};\n      this.hasFeedback = false;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.nzBlur = new EventEmitter();\n      this.nzFocus = new EventEmitter();\n      this.nzSize = 'default';\n      this.nzMin = -Infinity;\n      this.nzMax = Infinity;\n      this.nzParser = value => value.trim().replace(/。/g, '.').replace(/[^\\w\\.-]+/g, '');\n      this.nzPrecisionMode = 'toFixed';\n      this.nzPlaceHolder = '';\n      this.nzStatus = '';\n      this.nzStep = 1;\n      this.nzInputMode = 'decimal';\n      this.nzId = null;\n      this.nzDisabled = false;\n      this.nzReadOnly = false;\n      this.nzAutoFocus = false;\n      this.nzBorderless = false;\n      this.nzFormatter = value => value;\n    }\n    ngOnInit() {\n      this.nzFormStatusService?.formStatusChanges.pipe(distinctUntilChanged((pre, cur) => {\n        return pre.status === cur.status && pre.hasFeedback === cur.hasFeedback;\n      }), takeUntil(this.destroy$)).subscribe(({\n        status,\n        hasFeedback\n      }) => {\n        this.setStatusStyles(status, hasFeedback);\n      });\n      this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          this.isFocused = false;\n          this.updateDisplayValue(this.value);\n          this.nzBlur.emit();\n          Promise.resolve().then(() => this.onTouched());\n        } else {\n          this.isFocused = true;\n          this.nzFocus.emit();\n        }\n      });\n      this.dir = this.directionality.value;\n      this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n      });\n      this.setupHandlersListeners();\n      this.ngZone.runOutsideAngular(() => {\n        fromEvent(this.inputElement.nativeElement, 'keyup').pipe(takeUntil(this.destroy$)).subscribe(() => this.stop());\n        fromEvent(this.inputElement.nativeElement, 'keydown').pipe(takeUntil(this.destroy$)).subscribe(event => {\n          const {\n            keyCode\n          } = event;\n          if (keyCode !== UP_ARROW && keyCode !== DOWN_ARROW && keyCode !== ENTER) {\n            return;\n          }\n          this.ngZone.run(() => {\n            if (keyCode === UP_ARROW) {\n              const ratio = this.getRatio(event);\n              this.up(event, ratio);\n              this.stop();\n            } else if (keyCode === DOWN_ARROW) {\n              const ratio = this.getRatio(event);\n              this.down(event, ratio);\n              this.stop();\n            } else {\n              this.updateDisplayValue(this.value);\n            }\n            this.cdr.markForCheck();\n          });\n        });\n      });\n    }\n    ngOnChanges(changes) {\n      const {\n        nzStatus,\n        nzDisabled\n      } = changes;\n      if (changes.nzFormatter && !changes.nzFormatter.isFirstChange()) {\n        const validValue = this.getCurrentValidValue(this.parsedValue);\n        this.setValue(validValue);\n        this.updateDisplayValue(validValue);\n      }\n      if (nzDisabled) {\n        this.disabled$.next(this.nzDisabled);\n      }\n      if (nzStatus) {\n        this.setStatusStyles(this.nzStatus, this.hasFeedback);\n      }\n    }\n    ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n    ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n    setupHandlersListeners() {\n      this.ngZone.runOutsideAngular(() => {\n        merge(fromEvent(this.upHandler.nativeElement, 'mouseup'), fromEvent(this.upHandler.nativeElement, 'mouseleave'), fromEvent(this.downHandler.nativeElement, 'mouseup'), fromEvent(this.downHandler.nativeElement, 'mouseleave')).pipe(takeUntil(this.destroy$)).subscribe(() => this.stop());\n      });\n    }\n    setStatusStyles(status, hasFeedback) {\n      // set inner status\n      this.status = status;\n      this.hasFeedback = hasFeedback;\n      this.cdr.markForCheck();\n      // render status if nzStatus is set\n      this.statusCls = getStatusClassNames(this.prefixCls, status, hasFeedback);\n      Object.keys(this.statusCls).forEach(status => {\n        if (this.statusCls[status]) {\n          this.renderer.addClass(this.elementRef.nativeElement, status);\n        } else {\n          this.renderer.removeClass(this.elementRef.nativeElement, status);\n        }\n      });\n    }\n    static {\n      this.ɵfac = function NzInputNumberComponent_Factory(t) {\n        return new (t || NzInputNumberComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(i3.NzDestroyService), i0.ɵɵdirectiveInject(i4.NzFormStatusService, 8), i0.ɵɵdirectiveInject(i4.NzFormNoStatusService, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: NzInputNumberComponent,\n        selectors: [[\"nz-input-number\"]],\n        viewQuery: function NzInputNumberComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n            i0.ɵɵviewQuery(_c1, 7);\n            i0.ɵɵviewQuery(_c2, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.upHandler = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.downHandler = _t.first);\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n          }\n        },\n        hostAttrs: [1, \"ant-input-number\"],\n        hostVars: 16,\n        hostBindings: function NzInputNumberComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"ant-input-number-in-form-item\", !!ctx.nzFormStatusService)(\"ant-input-number-focused\", ctx.isFocused)(\"ant-input-number-lg\", ctx.nzSize === \"large\")(\"ant-input-number-sm\", ctx.nzSize === \"small\")(\"ant-input-number-disabled\", ctx.nzDisabled)(\"ant-input-number-readonly\", ctx.nzReadOnly)(\"ant-input-number-rtl\", ctx.dir === \"rtl\")(\"ant-input-number-borderless\", ctx.nzBorderless);\n          }\n        },\n        inputs: {\n          nzSize: \"nzSize\",\n          nzMin: \"nzMin\",\n          nzMax: \"nzMax\",\n          nzParser: \"nzParser\",\n          nzPrecision: \"nzPrecision\",\n          nzPrecisionMode: \"nzPrecisionMode\",\n          nzPlaceHolder: \"nzPlaceHolder\",\n          nzStatus: \"nzStatus\",\n          nzStep: \"nzStep\",\n          nzInputMode: \"nzInputMode\",\n          nzId: \"nzId\",\n          nzDisabled: \"nzDisabled\",\n          nzReadOnly: \"nzReadOnly\",\n          nzAutoFocus: \"nzAutoFocus\",\n          nzBorderless: \"nzBorderless\",\n          nzFormatter: \"nzFormatter\"\n        },\n        outputs: {\n          nzBlur: \"nzBlur\",\n          nzFocus: \"nzFocus\"\n        },\n        exportAs: [\"nzInputNumber\"],\n        features: [i0.ɵɵProvidersFeature([{\n          provide: NG_VALUE_ACCESSOR,\n          useExisting: forwardRef(() => NzInputNumberComponent),\n          multi: true\n        }, NzDestroyService]), i0.ɵɵNgOnChangesFeature],\n        decls: 11,\n        vars: 15,\n        consts: [[1, \"ant-input-number-handler-wrap\"], [\"unselectable\", \"unselectable\", 1, \"ant-input-number-handler\", \"ant-input-number-handler-up\", 3, \"mousedown\"], [\"upHandler\", \"\"], [\"nz-icon\", \"\", \"nzType\", \"up\", 1, \"ant-input-number-handler-up-inner\"], [\"unselectable\", \"unselectable\", 1, \"ant-input-number-handler\", \"ant-input-number-handler-down\", 3, \"mousedown\"], [\"downHandler\", \"\"], [\"nz-icon\", \"\", \"nzType\", \"down\", 1, \"ant-input-number-handler-down-inner\"], [1, \"ant-input-number-input-wrap\"], [\"autocomplete\", \"off\", 1, \"ant-input-number-input\", 3, \"disabled\", \"placeholder\", \"readOnly\", \"ngModel\", \"ngModelChange\"], [\"inputElement\", \"\"], [\"class\", \"ant-input-number-suffix\", 3, \"status\", 4, \"ngIf\"], [1, \"ant-input-number-suffix\", 3, \"status\"]],\n        template: function NzInputNumberComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"span\", 1, 2);\n            i0.ɵɵlistener(\"mousedown\", function NzInputNumberComponent_Template_span_mousedown_1_listener($event) {\n              return ctx.up($event);\n            });\n            i0.ɵɵelement(3, \"span\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"span\", 4, 5);\n            i0.ɵɵlistener(\"mousedown\", function NzInputNumberComponent_Template_span_mousedown_4_listener($event) {\n              return ctx.down($event);\n            });\n            i0.ɵɵelement(6, \"span\", 6);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(7, \"div\", 7)(8, \"input\", 8, 9);\n            i0.ɵɵlistener(\"ngModelChange\", function NzInputNumberComponent_Template_input_ngModelChange_8_listener($event) {\n              return ctx.onModelChange($event);\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(10, NzInputNumberComponent_nz_form_item_feedback_icon_10_Template, 1, 1, \"nz-form-item-feedback-icon\", 10);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵclassProp(\"ant-input-number-handler-up-disabled\", ctx.disabledUp);\n            i0.ɵɵadvance(3);\n            i0.ɵɵclassProp(\"ant-input-number-handler-down-disabled\", ctx.disabledDown);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"disabled\", ctx.nzDisabled)(\"placeholder\", ctx.nzPlaceHolder)(\"readOnly\", ctx.nzReadOnly)(\"ngModel\", ctx.displayValue);\n            i0.ɵɵattribute(\"id\", ctx.nzId)(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null)(\"min\", ctx.nzMin)(\"max\", ctx.nzMax)(\"step\", ctx.nzStep)(\"inputmode\", ctx.nzInputMode);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.hasFeedback && !!ctx.status && !ctx.nzFormNoStatusService);\n          }\n        },\n        dependencies: [i4$1.NgIf, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgModel, i7.NzIconDirective, i4.NzFormItemFeedbackIconComponent],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  __decorate([InputBoolean()], NzInputNumberComponent.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean()], NzInputNumberComponent.prototype, \"nzReadOnly\", void 0);\n  __decorate([InputBoolean()], NzInputNumberComponent.prototype, \"nzAutoFocus\", void 0);\n  __decorate([InputBoolean()], NzInputNumberComponent.prototype, \"nzBorderless\", void 0);\n  return NzInputNumberComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzInputNumberGroupSlotComponent = /*#__PURE__*/(() => {\n  class NzInputNumberGroupSlotComponent {\n    constructor() {\n      this.icon = null;\n      this.type = null;\n      this.template = null;\n    }\n    static {\n      this.ɵfac = function NzInputNumberGroupSlotComponent_Factory(t) {\n        return new (t || NzInputNumberGroupSlotComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: NzInputNumberGroupSlotComponent,\n        selectors: [[\"\", \"nz-input-number-group-slot\", \"\"]],\n        hostVars: 6,\n        hostBindings: function NzInputNumberGroupSlotComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"ant-input-number-group-addon\", ctx.type === \"addon\")(\"ant-input-number-prefix\", ctx.type === \"prefix\")(\"ant-input-number-suffix\", ctx.type === \"suffix\");\n          }\n        },\n        inputs: {\n          icon: \"icon\",\n          type: \"type\",\n          template: \"template\"\n        },\n        attrs: _c3,\n        ngContentSelectors: _c4,\n        decls: 3,\n        vars: 2,\n        consts: [[\"nz-icon\", \"\", 3, \"nzType\", 4, \"ngIf\"], [4, \"nzStringTemplateOutlet\"], [\"nz-icon\", \"\", 3, \"nzType\"]],\n        template: function NzInputNumberGroupSlotComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵtemplate(0, NzInputNumberGroupSlotComponent_span_0_Template, 1, 1, \"span\", 0);\n            i0.ɵɵtemplate(1, NzInputNumberGroupSlotComponent_ng_container_1_Template, 2, 1, \"ng-container\", 1);\n            i0.ɵɵprojection(2);\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"ngIf\", ctx.icon);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx.template);\n          }\n        },\n        dependencies: [i4$1.NgIf, i2$1.NzStringTemplateOutletDirective, i7.NzIconDirective],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  return NzInputNumberGroupSlotComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NzInputNumberGroupWhitSuffixOrPrefixDirective = /*#__PURE__*/(() => {\n  class NzInputNumberGroupWhitSuffixOrPrefixDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n    static {\n      this.ɵfac = function NzInputNumberGroupWhitSuffixOrPrefixDirective_Factory(t) {\n        return new (t || NzInputNumberGroupWhitSuffixOrPrefixDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: NzInputNumberGroupWhitSuffixOrPrefixDirective,\n        selectors: [[\"nz-input-number-group\", \"nzSuffix\", \"\"], [\"nz-input-number-group\", \"nzPrefix\", \"\"]]\n      });\n    }\n  }\n  return NzInputNumberGroupWhitSuffixOrPrefixDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NzInputNumberGroupComponent = /*#__PURE__*/(() => {\n  class NzInputNumberGroupComponent {\n    constructor(focusMonitor, elementRef, renderer, cdr, directionality, nzFormStatusService, nzFormNoStatusService) {\n      this.focusMonitor = focusMonitor;\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.cdr = cdr;\n      this.directionality = directionality;\n      this.nzFormStatusService = nzFormStatusService;\n      this.nzFormNoStatusService = nzFormNoStatusService;\n      this.nzAddOnBeforeIcon = null;\n      this.nzAddOnAfterIcon = null;\n      this.nzPrefixIcon = null;\n      this.nzSuffixIcon = null;\n      this.nzStatus = '';\n      this.nzSize = 'default';\n      this.nzCompact = false;\n      this.isLarge = false;\n      this.isSmall = false;\n      this.isAffix = false;\n      this.isAddOn = false;\n      this.isFeedback = false;\n      this.focused = false;\n      this.disabled = false;\n      this.dir = 'ltr';\n      // status\n      this.prefixCls = 'ant-input-number';\n      this.affixStatusCls = {};\n      this.groupStatusCls = {};\n      this.affixInGroupStatusCls = {};\n      this.status = '';\n      this.hasFeedback = false;\n      this.destroy$ = new Subject();\n    }\n    updateChildrenInputSize() {\n      if (this.listOfNzInputNumberComponent) {\n        this.listOfNzInputNumberComponent.forEach(item => item.nzSize = this.nzSize);\n      }\n    }\n    ngOnInit() {\n      this.nzFormStatusService?.formStatusChanges.pipe(distinctUntilChanged((pre, cur) => {\n        return pre.status === cur.status && pre.hasFeedback === cur.hasFeedback;\n      }), takeUntil(this.destroy$)).subscribe(({\n        status,\n        hasFeedback\n      }) => {\n        this.setStatusStyles(status, hasFeedback);\n      });\n      this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(focusOrigin => {\n        this.focused = !!focusOrigin;\n        this.cdr.markForCheck();\n      });\n      this.dir = this.directionality.value;\n      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n      });\n    }\n    ngAfterContentInit() {\n      this.updateChildrenInputSize();\n      const listOfInputChange$ = this.listOfNzInputNumberComponent.changes.pipe(startWith(this.listOfNzInputNumberComponent));\n      listOfInputChange$.pipe(switchMap(list => merge(...[listOfInputChange$, ...list.map(input => input.disabled$)])), mergeMap(() => listOfInputChange$), map(list => list.some(input => input.nzDisabled)), takeUntil(this.destroy$)).subscribe(disabled => {\n        this.disabled = disabled;\n        this.cdr.markForCheck();\n      });\n    }\n    ngOnChanges(changes) {\n      const {\n        nzSize,\n        nzSuffix,\n        nzPrefix,\n        nzPrefixIcon,\n        nzSuffixIcon,\n        nzAddOnAfter,\n        nzAddOnBefore,\n        nzAddOnAfterIcon,\n        nzAddOnBeforeIcon,\n        nzStatus\n      } = changes;\n      if (nzSize) {\n        this.updateChildrenInputSize();\n        this.isLarge = this.nzSize === 'large';\n        this.isSmall = this.nzSize === 'small';\n      }\n      if (nzSuffix || nzPrefix || nzPrefixIcon || nzSuffixIcon) {\n        this.isAffix = !!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon);\n      }\n      if (nzAddOnAfter || nzAddOnBefore || nzAddOnAfterIcon || nzAddOnBeforeIcon) {\n        this.isAddOn = !!(this.nzAddOnAfter || this.nzAddOnBefore || this.nzAddOnAfterIcon || this.nzAddOnBeforeIcon);\n        this.nzFormNoStatusService?.noFormStatus?.next(this.isAddOn);\n      }\n      if (nzStatus) {\n        this.setStatusStyles(this.nzStatus, this.hasFeedback);\n      }\n    }\n    ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    setStatusStyles(status, hasFeedback) {\n      // set inner status\n      this.status = status;\n      this.hasFeedback = hasFeedback;\n      this.isFeedback = !!status && hasFeedback;\n      const baseAffix = !!(this.nzSuffix || this.nzPrefix || this.nzPrefixIcon || this.nzSuffixIcon);\n      this.isAffix = baseAffix || !this.isAddOn && hasFeedback;\n      this.affixInGroupStatusCls = this.isAffix || this.isFeedback ? this.affixStatusCls = getStatusClassNames(`${this.prefixCls}-affix-wrapper`, status, hasFeedback) : {};\n      this.cdr.markForCheck();\n      // render status if nzStatus is set\n      this.affixStatusCls = getStatusClassNames(`${this.prefixCls}-affix-wrapper`, this.isAddOn ? '' : status, this.isAddOn ? false : hasFeedback);\n      this.groupStatusCls = getStatusClassNames(`${this.prefixCls}-group-wrapper`, this.isAddOn ? status : '', this.isAddOn ? hasFeedback : false);\n      const statusCls = {\n        ...this.affixStatusCls,\n        ...this.groupStatusCls\n      };\n      Object.keys(statusCls).forEach(status => {\n        if (statusCls[status]) {\n          this.renderer.addClass(this.elementRef.nativeElement, status);\n        } else {\n          this.renderer.removeClass(this.elementRef.nativeElement, status);\n        }\n      });\n    }\n    static {\n      this.ɵfac = function NzInputNumberGroupComponent_Factory(t) {\n        return new (t || NzInputNumberGroupComponent)(i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Directionality, 8), i0.ɵɵdirectiveInject(i4.NzFormStatusService, 8), i0.ɵɵdirectiveInject(i4.NzFormNoStatusService, 8));\n      };\n    }\n    static {\n      this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n        type: NzInputNumberGroupComponent,\n        selectors: [[\"nz-input-number-group\"]],\n        contentQueries: function NzInputNumberGroupComponent_ContentQueries(rf, ctx, dirIndex) {\n          if (rf & 1) {\n            i0.ɵɵcontentQuery(dirIndex, NzInputNumberComponent, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listOfNzInputNumberComponent = _t);\n          }\n        },\n        hostVars: 24,\n        hostBindings: function NzInputNumberGroupComponent_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"ant-input-number-group\", ctx.nzCompact)(\"ant-input-number-group-compact\", ctx.nzCompact)(\"ant-input-number-group-wrapper\", ctx.isAddOn)(\"ant-input-number-group-wrapper-rtl\", ctx.isAddOn && ctx.dir === \"rtl\")(\"ant-input-number-group-wrapper-lg\", ctx.isAddOn && ctx.isLarge)(\"ant-input-number-group-wrapper-sm\", ctx.isAddOn && ctx.isSmall)(\"ant-input-number-affix-wrapper\", !ctx.isAddOn && ctx.isAffix)(\"ant-input-number-affix-wrapper-rtl\", !ctx.isAddOn && ctx.dir === \"rtl\")(\"ant-input-number-affix-wrapper-focused\", !ctx.isAddOn && ctx.isAffix && ctx.focused)(\"ant-input-number-affix-wrapper-disabled\", !ctx.isAddOn && ctx.isAffix && ctx.disabled)(\"ant-input-number-affix-wrapper-lg\", !ctx.isAddOn && ctx.isAffix && ctx.isLarge)(\"ant-input-number-affix-wrapper-sm\", !ctx.isAddOn && ctx.isAffix && ctx.isSmall);\n          }\n        },\n        inputs: {\n          nzAddOnBeforeIcon: \"nzAddOnBeforeIcon\",\n          nzAddOnAfterIcon: \"nzAddOnAfterIcon\",\n          nzPrefixIcon: \"nzPrefixIcon\",\n          nzSuffixIcon: \"nzSuffixIcon\",\n          nzAddOnBefore: \"nzAddOnBefore\",\n          nzAddOnAfter: \"nzAddOnAfter\",\n          nzPrefix: \"nzPrefix\",\n          nzStatus: \"nzStatus\",\n          nzSuffix: \"nzSuffix\",\n          nzSize: \"nzSize\",\n          nzCompact: \"nzCompact\"\n        },\n        exportAs: [\"nzInputNumberGroup\"],\n        features: [i0.ɵɵProvidersFeature([NzFormNoStatusService]), i0.ɵɵNgOnChangesFeature],\n        ngContentSelectors: _c4,\n        decls: 7,\n        vars: 2,\n        consts: [[\"class\", \"ant-input-number-wrapper ant-input-number-group\", 4, \"ngIf\", \"ngIfElse\"], [\"noAddOnTemplate\", \"\"], [\"affixTemplate\", \"\"], [\"contentTemplate\", \"\"], [1, \"ant-input-number-wrapper\", \"ant-input-number-group\"], [\"nz-input-number-group-slot\", \"\", \"type\", \"addon\", 3, \"icon\", \"template\", 4, \"ngIf\"], [\"class\", \"ant-input-number-affix-wrapper\", 3, \"ant-input-number-affix-wrapper-disabled\", \"ant-input-number-affix-wrapper-sm\", \"ant-input-number-affix-wrapper-lg\", \"ant-input-number-affix-wrapper-focused\", \"ngClass\", 4, \"ngIf\", \"ngIfElse\"], [\"nz-input-number-group-slot\", \"\", \"type\", \"addon\", 3, \"icon\", \"template\"], [1, \"ant-input-number-affix-wrapper\", 3, \"ngClass\"], [3, \"ngTemplateOutlet\"], [3, \"ngIf\", \"ngIfElse\"], [\"nz-input-number-group-slot\", \"\", \"type\", \"prefix\", 3, \"icon\", \"template\", 4, \"ngIf\"], [\"nz-input-number-group-slot\", \"\", \"type\", \"suffix\", 3, \"icon\", \"template\", 4, \"ngIf\"], [\"nz-input-number-group-slot\", \"\", \"type\", \"prefix\", 3, \"icon\", \"template\"], [\"nz-input-number-group-slot\", \"\", \"type\", \"suffix\", 3, \"icon\", \"template\"], [3, \"status\", 4, \"ngIf\"], [3, \"status\"], [\"nz-input-number-group-slot\", \"\", \"type\", \"suffix\", 4, \"ngIf\"], [\"nz-input-number-group-slot\", \"\", \"type\", \"suffix\"]],\n        template: function NzInputNumberGroupComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵtemplate(0, NzInputNumberGroupComponent_span_0_Template, 4, 4, \"span\", 0);\n            i0.ɵɵtemplate(1, NzInputNumberGroupComponent_ng_template_1_Template, 1, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n            i0.ɵɵtemplate(3, NzInputNumberGroupComponent_ng_template_3_Template, 3, 3, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n            i0.ɵɵtemplate(5, NzInputNumberGroupComponent_ng_template_5_Template, 2, 1, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n          }\n          if (rf & 2) {\n            const _r1 = i0.ɵɵreference(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.isAddOn)(\"ngIfElse\", _r1);\n          }\n        },\n        dependencies: [i4$1.NgClass, i4$1.NgIf, i4$1.NgTemplateOutlet, i4.NzFormItemFeedbackIconComponent, NzInputNumberGroupSlotComponent],\n        encapsulation: 2,\n        changeDetection: 0\n      });\n    }\n  }\n  __decorate([InputBoolean()], NzInputNumberGroupComponent.prototype, \"nzCompact\", void 0);\n  return NzInputNumberGroupComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzInputNumberModule = /*#__PURE__*/(() => {\n  class NzInputNumberModule {\n    static {\n      this.ɵfac = function NzInputNumberModule_Factory(t) {\n        return new (t || NzInputNumberModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: NzInputNumberModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n        imports: [BidiModule, CommonModule, FormsModule, NzOutletModule, NzIconModule, NzFormPatchModule]\n      });\n    }\n  }\n  return NzInputNumberModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzInputNumberComponent, NzInputNumberGroupComponent, NzInputNumberGroupSlotComponent, NzInputNumberGroupWhitSuffixOrPrefixDirective, NzInputNumberModule };\n//# sourceMappingURL=ng-zorro-antd-input-number.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}