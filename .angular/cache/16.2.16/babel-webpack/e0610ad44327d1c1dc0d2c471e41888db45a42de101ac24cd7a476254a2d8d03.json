{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ng-zorro-antd/notification\";\nimport * as i2 from \"./api.service\";\nlet CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(_notification, _api) {\n      this._notification = _notification;\n      this._api = _api;\n      this.cartData = {\n        products: [],\n        total: 0\n      };\n      this.cartDataObs$ = new BehaviorSubject(this.cartData);\n      let localCartData = JSON.parse(localStorage.getItem('cart'));\n      if (localCartData) this.cartData = localCartData;\n      this.cartDataObs$.next(this.cartData);\n    }\n    submitCheckout(userId, cart) {\n      return this._api.postTypeRequest('orders/create', {\n        userId: userId,\n        cart: cart\n      });\n    }\n    addProduct(params) {\n      const {\n        id,\n        price,\n        quantity,\n        image,\n        title,\n        maxQuantity\n      } = params;\n      const product = {\n        id,\n        price,\n        quantity,\n        image,\n        title,\n        maxQuantity\n      };\n      if (!this.isProductInCart(id)) {\n        if (quantity) this.cartData.products.push(product);else this.cartData.products.push({\n          ...product,\n          quantity: 1\n        });\n      } else {\n        // copy array, find item index and update\n        let updatedProducts = [...this.cartData.products];\n        let productIndex = updatedProducts.findIndex(prod => prod.id == id);\n        let product = updatedProducts[productIndex];\n        // if no quantity, increment\n        if (quantity) {\n          updatedProducts[productIndex] = {\n            ...product,\n            quantity: quantity\n          };\n        } else {\n          updatedProducts[productIndex] = {\n            ...product,\n            quantity: product.quantity + 1\n          };\n        }\n        console.log(updatedProducts);\n        this.cartData.products = updatedProducts;\n      }\n      this.cartData.total = this.getCartTotal();\n      this._notification.create('success', 'Product added to cart', `${title} was successfully added to the cart`);\n      this.cartDataObs$.next({\n        ...this.cartData\n      });\n      localStorage.setItem('cart', JSON.stringify(this.cartData));\n    }\n    updateCart(id, quantity) {\n      // copy array, find item index and update\n      let updatedProducts = [...this.cartData.products];\n      let productIndex = updatedProducts.findIndex(prod => prod.id == id);\n      updatedProducts[productIndex] = {\n        ...updatedProducts[productIndex],\n        quantity: quantity\n      };\n      this.cartData.products = updatedProducts;\n      this.cartData.total = this.getCartTotal();\n      this.cartDataObs$.next({\n        ...this.cartData\n      });\n      console.log(this.cartData.products);\n      localStorage.setItem('cart', JSON.stringify(this.cartData));\n    }\n    removeProduct(id) {\n      let updatedProducts = this.cartData.products.filter(prod => prod.id !== id);\n      this.cartData.products = updatedProducts;\n      this.cartData.total = this.getCartTotal();\n      this.cartDataObs$.next({\n        ...this.cartData\n      });\n      localStorage.setItem('cart', JSON.stringify(this.cartData));\n      this._notification.create('success', 'Removed successfully', 'The selected item was removed from the cart successfully');\n    }\n    clearCart() {\n      this.cartData = {\n        products: [],\n        total: 0\n      };\n      this.cartDataObs$.next({\n        ...this.cartData\n      });\n      localStorage.setItem('cart', JSON.stringify(this.cartData));\n    }\n    getCartTotal() {\n      let totalSum = 0;\n      this.cartData.products.forEach(prod => totalSum += prod.price * prod.quantity);\n      return totalSum;\n    }\n    isProductInCart(id) {\n      return this.cartData.products.findIndex(prod => prod.id === id) !== -1;\n    }\n    static {\n      this.ɵfac = function CartService_Factory(t) {\n        return new (t || CartService)(i0.ɵɵinject(i1.NzNotificationService), i0.ɵɵinject(i2.ApiService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CartService,\n        factory: CartService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CartService;\n})();\nexport { CartService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}